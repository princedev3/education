// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  USER
}


model User {
  id            String          @id @default(cuid() )
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password String?
  accounts      Account[]
  sessions      Session[]
   taskAttempt  TaskAttempt[]
  Authenticator Authenticator[]
  role UserRole @default(USER)
 subject Subject[]
  createdAt DateTime @default(now())

}
 
model Account {
  id                String  @id @default(cuid()) 
  userId            String  
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid()) 
  sessionToken String   @unique
  userId       String  
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
 

model VerificationToken {
  id         String   @id @default(cuid())
  email   String
  identifier String?
  token      String
  expires    DateTime
 
  @@unique([identifier, token,email])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @default(cuid())
  userId               String  
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Subject {
    id       String   @id @default(cuid())
    name     String   @unique
    modules  Module[]
    duration String
    userId String
    user User @relation(fields: [userId],references: [id])
    desc String
    coverImage String
    images String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
     pdf Pdf[]
  }

model Pdf {
  id          String   @id @default(uuid())
  url         String
  subjectId   String?
  subject     Subject? @relation(fields: [subjectId], references: [id])
  moduleId    String?
  module      Module?  @relation(fields: [moduleId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([subjectId, moduleId]) 
}
  model Module {
     id       String   @id @default(cuid())
    name        String
    description String
    subjectId   String
    images String[]
    subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    tasks       Task[]
    pdf Pdf[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
  }
 
  model Task {
     id       String   @id @default(cuid())
    task      String
    answer    String  
    moduleId  String
    option String[]
    module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    taskAttempt TaskAttempt[]
  }


model TaskAttempt {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userAnswer String
  isCorrect Boolean
  createdAt DateTime @default(now())

  @@unique([userId, taskId])
}